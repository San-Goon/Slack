{"version":3,"file":"94.js","mappings":"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","sources":["webpack://front/./pages/DirectMessage/styles.tsx","webpack://front/./pages/DirectMessage/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n`;\r\n\r\nexport const DragOver = styled.div`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 64px);\r\n  background: white;\r\n  opacity: 0.7;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 40px;\r\n`;\r\n","import { Container, Header } from '@pages/DirectMessage/styles';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport gravatar from 'gravatar';\r\nimport useSWR, { mutate } from 'swr';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport fetcher from '@utils/fetcher';\r\nimport { useParams } from 'react-router';\r\nimport ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport axios from 'axios';\r\nimport { IDM } from '@typings/db';\r\nimport makeSection from '@utils/makeSection';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport useSocket from '@hooks/useSocket';\r\nimport { DragOver } from '@pages/Channel/styles';\r\nimport { backUrl } from '@utils/config';\r\n\r\nconst DirectMessage = () => {\r\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\r\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\r\n  const { data: myData } = useSWR(`/api/users`, fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IDM[]>(\r\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n  const [socket] = useSocket(workspace);\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (chat?.trim() && chatData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            SenderId: myData.Id,\r\n            Sender: myData,\r\n            ReceiverId: userData.id,\r\n            Receiver: userData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\r\n          setChat('');\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            mutateChat();\r\n          })\r\n          .catch((error) => {\r\n            console.dir(error);\r\n          });\r\n      }\r\n    },\r\n    [chat, chatData, myData, userData, workspace, id],\r\n  );\r\n\r\n  const onMessage = useCallback((data: IDM) => {\r\n    if (data.SenderId === Number(id) && myData.id !== Number(id)) {\r\n      mutateChat((chatData) => {\r\n        chatData?.[0].unshift(data);\r\n        return chatData;\r\n      }, false).then(() => {\r\n        if (scrollbarRef.current) {\r\n          if (\r\n            scrollbarRef.current.getScrollHeight() <\r\n            scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n          ) {\r\n            console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n            setTimeout(() => {\r\n              scrollbarRef.current?.scrollToBottom();\r\n            }, 50);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`${workspace}-${id}`, new Date().getTime().toString());\r\n  }, [workspace, id]);\r\n\r\n  useEffect(() => {\r\n    socket?.on('dm', onMessage);\r\n    return () => {\r\n      socket?.off('dm', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      setTimeout(() => {\r\n        scrollbarRef.current?.scrollToBottom();\r\n      }, 50);\r\n    }\r\n  }, [chatData]);\r\n\r\n  const onDrop = useCallback(\r\n    (e) => {\r\n      console.log(e);\r\n      const formData = new FormData();\r\n      if (e.dataTransfer.items) {\r\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\r\n          if (e.dataTransfer.items[i].kind === 'file') {\r\n            const file = e.dataTransfer.items[i].getAsFile();\r\n            console.log('... file[' + i + '].name =' + file.name);\r\n            formData.append('image', file);\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\r\n          console.log('...file[' + i + '].name=' + e.dataTransfer.files[i].name);\r\n          formData.append('image', e.dataTransfer.files[i]);\r\n        }\r\n      }\r\n      axios.post(`/api/workspaces/${workspace}/dms/${id}/images`, formData).then(() => {\r\n        setDragOver(false);\r\n      });\r\n    },\r\n    [workspace, id],\r\n  );\r\n\r\n  const onDragOver = useCallback((e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n    setDragOver(true);\r\n  }, []);\r\n\r\n  if (!userData || !myData) {\r\n    return null;\r\n  }\r\n\r\n  //로딩 시 스크롤바 제일 아래로\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n\r\n  return (\r\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\r\n      <Header>\r\n        <img src={gravatar.url(userData.email, { s: '24px', d: 'retro' })} alt={userData.nickname} />\r\n        <span>{userData.nickname}</span>\r\n      </Header>\r\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\r\n      {dragOver && <DragOver>업로드!</DragOver>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DirectMessage;\r\n"],"names":["Container","Header","workspace","id","useParams","data","userData","useSWR","fetcher","myData","chat","onChangeChat","setChat","useInput","dragOver","setDragOver","useState","chatData","mutate","mutateChat","setSize","useSWRInfinite","index","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","onSubmitForm","useCallback","e","preventDefault","trim","savedChat","prevChatData","unshift","content","SenderId","Id","Sender","ReceiverId","Receiver","createdAt","Date","then","localStorage","setItem","getTime","toString","current","scrollToBottom","axios","catch","error","console","dir","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","log","getValues","setTimeout","useEffect","on","off","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","name","append","files","onDragOver","chatSections","makeSection","flat","reverse","src","gravatar","email","s","d","alt","nickname","ChatList","ref","ChatBox"],"sourceRoot":""}