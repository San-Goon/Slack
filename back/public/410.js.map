{"version":3,"file":"410.js","mappings":"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","sources":["webpack://front/./components/ChatBox/styles.tsx","webpack://front/./components/ChatBox/index.tsx","webpack://front/./components/Chat/styles.tsx","webpack://front/./components/Chat/index.tsx","webpack://front/./components/ChatList/styles.tsx","webpack://front/./components/ChatList/index.tsx","webpack://front/./pages/Channel/styles.tsx","webpack://front/./utils/makeSection.ts"],"sourcesContent":["import styled from '@emotion/styled';\r\nimport { MentionsInput } from 'react-mentions';\r\n\r\nexport const ChatArea = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  padding: 20px;\r\n  padding-top: 0;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  color: rgb(29, 28, 29);\r\n  font-size: 15px;\r\n  width: 100%;\r\n  border-radius: 4px;\r\n  border: 1px solid rgb(29, 28, 29);\r\n`;\r\n\r\nexport const MentionsTextarea = styled(MentionsInput)`\r\n  font-family: Slack-Lato, appleLogo, sans-serif;\r\n  font-size: 15px;\r\n  padding: 8px 9px;\r\n  & strong {\r\n    background: skyblue;\r\n  }\r\n  & textarea {\r\n    height: 44px;\r\n    padding: 9px 10px !important;\r\n    outline: none !important;\r\n    border-radius: 4px !important;\r\n    resize: none !important;\r\n    line-height: 22px;\r\n    border: none;\r\n  }\r\n  & ul {\r\n    border: 1px solid lightgray;\r\n    max-height: 200px;\r\n    overflow-y: auto;\r\n    padding: 9px 10px;\r\n    background: white;\r\n    border-radius: 4px;\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const Toolbox = styled.div`\r\n  position: relative;\r\n  background: rgb(248, 248, 248);\r\n  height: 41px;\r\n  display: flex;\r\n  border-top: 1px solid rgb(221, 221, 221);\r\n  align-items: center;\r\n  border-bottom-left-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n`;\r\n\r\nexport const SendButton = styled.button`\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n`;\r\n\r\nexport const EachMention = styled.button<{ focus: boolean }>`\r\n  padding: 4px 20px;\r\n  background: transparent;\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  color: rgb(28, 29, 28);\r\n  width: 100%;\r\n  & img {\r\n    margin-right: 5px;\r\n  }\r\n  ${({ focus }) =>\r\n    focus &&\r\n    `\r\n    background: #1264a3;\r\n    color: white;\r\n  `};\r\n`;\r\n","import React, { useCallback, useEffect, useRef, VFC } from 'react';\r\nimport { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from './styles';\r\nimport autoSize from 'autosize';\r\nimport { Mention, SuggestionDataItem } from 'react-mentions';\r\nimport useSWR from 'swr';\r\nimport fetcher from '@utils/fetcher';\r\nimport { IUser } from '@typings/db';\r\nimport { useParams } from 'react-router';\r\nimport gravatar from 'gravatar';\r\nimport { backUrl } from '@utils/config';\r\n\r\ninterface Props {\r\n  chat: string;\r\n  onSubmitForm: (e: any) => void;\r\n  onChangeChat: (e: any) => void;\r\n}\r\n\r\nconst ChatBox: VFC<Props> = ({ chat, onSubmitForm, onChangeChat }) => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const { data: userData } = useSWR<IUser | false>(`/api/users`, fetcher, { dedupingInterval: 2000 });\r\n  const { data: memberData } = useSWR<IUser[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      autoSize(textareaRef.current);\r\n    }\r\n  }, []);\r\n  const onKeyDownChat = useCallback(\r\n    (e) => {\r\n      if (e.key === 'Enter') {\r\n        if (!e.shiftKey) {\r\n          e.preventDefault();\r\n          onSubmitForm(e);\r\n        }\r\n      }\r\n    },\r\n    [onSubmitForm],\r\n  );\r\n\r\n  const renderSuggestion = useCallback(\r\n    (\r\n      suggestion: SuggestionDataItem,\r\n      search: string,\r\n      highlightedDisplay: React.ReactNode,\r\n      index: number,\r\n      focus: boolean,\r\n    ): React.ReactNode => {\r\n      if (!memberData) return;\r\n      return (\r\n        <EachMention focus={focus}>\r\n          <img\r\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\r\n            alt={memberData[index].nickname}\r\n          />\r\n          <span>{highlightedDisplay}</span>\r\n        </EachMention>\r\n      );\r\n    },\r\n    [memberData],\r\n  );\r\n\r\n  return (\r\n    <ChatArea>\r\n      <Form onSubmit={onSubmitForm}>\r\n        <MentionsTextarea\r\n          id=\"editor-chat\"\r\n          value={chat}\r\n          onChange={onChangeChat}\r\n          onKeyPress={onKeyDownChat}\r\n          inputRef={textareaRef}\r\n          allowSuggestionsAboveCursor\r\n        >\r\n          <Mention\r\n            appendSpaceOnAdd\r\n            trigger=\"@\"\r\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\r\n            renderSuggestion={renderSuggestion}\r\n          />\r\n        </MentionsTextarea>\r\n\r\n        <Toolbox>\r\n          <SendButton\r\n            className={\r\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\r\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\r\n            }\r\n            data-qa=\"texty_send_button\"\r\n            aria-label=\"Send message\"\r\n            data-sk=\"tooltip_parent\"\r\n            type=\"submit\"\r\n            disabled={!chat?.trim()}\r\n          >\r\n            <i className=\"c-icon c-icon--paperplane-filled\" aria-hidden=\"true\" />\r\n          </SendButton>\r\n        </Toolbox>\r\n      </Form>\r\n    </ChatArea>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatWrapper = styled.div`\r\n  display: flex;\r\n  padding: 8px 20px;\r\n\r\n  &:hover {\r\n    background: #eee;\r\n  }\r\n\r\n  & .chat-img {\r\n    display: flex;\r\n    width: 36px;\r\n    margin-right: 8px;\r\n\r\n    & img {\r\n      width: 36px;\r\n      height: 36px;\r\n    }\r\n  }\r\n\r\n  & .chat-text {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex: 1;\r\n\r\n    & p {\r\n      flex: 0 0 100%;\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  & .chat-user {\r\n    display: flex;\r\n    flex: 0 0 100%;\r\n    align-items: center;\r\n\r\n    & > b {\r\n      margin-right: 5px;\r\n    }\r\n\r\n    & > span {\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  & a {\r\n    text-decoration: none;\r\n    color: deepskyblue;\r\n  }\r\n`;\r\n","import { IDM, IChat } from '@typings/db';\r\nimport React, { VFC, memo, useMemo } from 'react';\r\nimport { ChatWrapper } from './styles';\r\nimport gravatar from 'gravatar';\r\nimport dayjs from 'dayjs';\r\nimport regexifyString from 'regexify-string';\r\nimport { useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { backUrl } from '@utils/config';\r\n\r\ninterface Props {\r\n  data: IDM | IChat;\r\n}\r\nconst Chat: VFC<Props> = ({ data }) => {\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const user = 'Sender' in data ? data.Sender : data.User;\r\n\r\n  const result = useMemo(\r\n    () =>\r\n      data.content.startsWith('uploads\\\\') ? (\r\n        <img src={`${backUrl}/${data.content}`} style={{ maxHeight: 200 }} />\r\n      ) : (\r\n        regexifyString({\r\n          input: data.content,\r\n          pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\r\n          decorator(match, index) {\r\n            const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/)!;\r\n            if (arr) {\r\n              return (\r\n                <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\r\n                  @{arr[1]}\r\n                </Link>\r\n              );\r\n            }\r\n            return <br key={index} />;\r\n          },\r\n        })\r\n      ),\r\n    [workspace, data.content],\r\n  );\r\n  return (\r\n    <ChatWrapper>\r\n      <div className=\"chat-img\">\r\n        <img src={gravatar.url(user.email, { s: '36px', d: 'retro' })} alt={user.nickname} />\r\n      </div>\r\n      <div className=\"chat-text\">\r\n        <div className=\"chat-user\">\r\n          <b>{user.nickname}</b>\r\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\r\n        </div>\r\n        <p>{result}</p>\r\n      </div>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\nexport default memo(Chat);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ChatZone = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Section = styled.section`\r\n  margin-top: 20px;\r\n  border-top: 1px solid #eee;\r\n`;\r\n\r\nexport const StickyHeader = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex: 1;\r\n  width: 100%;\r\n  position: sticky;\r\n  top: 14px;\r\n  & button {\r\n    font-weight: bold;\r\n    font-size: 13px;\r\n    height: 28px;\r\n    line-height: 27px;\r\n    padding: 0 16px;\r\n    z-index: 2;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\r\n    border-radius: 24px;\r\n    position: relative;\r\n    top: -13px;\r\n    background: white;\r\n    border: none;\r\n    outline: none;\r\n  }\r\n`;\r\n","import Chat from '@components/Chat';\r\nimport { IDM, IChat } from '@typings/db';\r\nimport React, { useCallback, forwardRef, MutableRefObject } from 'react';\r\nimport { ChatZone, Section, StickyHeader } from './styles';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\n\r\ninterface Props {\r\n  chatSections: { [key: string]: (IDM | IChat)[] };\r\n  setSize: (f: (size: number) => number) => Promise<(IDM | IChat)[][] | undefined>;\r\n  isReachingEnd: boolean;\r\n}\r\n\r\nconst ChatList = forwardRef<Scrollbars, Props>(({ chatSections, setSize, isReachingEnd }, scrollRef) => {\r\n  const onScroll = useCallback(\r\n    (values) => {\r\n      if (values.scrollTop === 0 && !isReachingEnd) {\r\n        console.log('가장 위');\r\n        setSize((prevSize) => prevSize + 1).then(() => {\r\n          const current = (scrollRef as MutableRefObject<Scrollbars>)?.current;\r\n          if (current) {\r\n            current.scrollTop(current.getScrollHeight() - values.scrollHeight);\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [scrollRef, isReachingEnd, setSize],\r\n  );\r\n\r\n  return (\r\n    <ChatZone>\r\n      <Scrollbars autoHide ref={scrollRef} onScrollFrame={onScroll}>\r\n        {Object.entries(chatSections).map(([date, chats]) => {\r\n          return (\r\n            <Section className={`section-${date}`} key={date}>\r\n              <StickyHeader>\r\n                <button>{date}</button>\r\n              </StickyHeader>\r\n              {chats.map((chat) => (\r\n                <Chat key={chat.id} data={chat} />\r\n              ))}\r\n            </Section>\r\n          );\r\n        })}\r\n      </Scrollbars>\r\n    </ChatZone>\r\n  );\r\n});\r\n\r\nexport default ChatList;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  \r\n  & .header-right {\r\n    display: flex;\r\n    flex: 1;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n`;\r\n\r\nexport const DragOver = styled.div`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 64px);\r\n  background: white;\r\n  opacity: 0.7;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 40px;\r\n`;\r\n","import { IChat, IDM } from '@typings/db';\r\nimport dayjs from 'dayjs';\r\n\r\nexport default function makeSection(chatList: (IDM | IChat)[]) {\r\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\r\n  chatList.forEach((chat) => {\r\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\r\n    if (Array.isArray(sections[monthDate])) {\r\n      sections[monthDate].push(chat);\r\n    } else {\r\n      sections[monthDate] = [chat];\r\n    }\r\n  });\r\n\r\n  return sections;\r\n}\r\n"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","chat","onSubmitForm","onChangeChat","workspace","channel","useParams","data","userData","useSWR","fetcher","dedupingInterval","memberData","textareaRef","useRef","useEffect","current","autoSize","onKeyDownChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","onSubmit","id","value","onChange","onKeyPress","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","type","disabled","ChatWrapper","Chat","user","Sender","User","result","useMemo","content","startsWith","backUrl","style","maxHeight","regexifyString","input","pattern","decorator","match","arr","to","dayjs","createdAt","format","memo","ChatZone","Section","StickyHeader","forwardRef","chatSections","setSize","isReachingEnd","scrollRef","onScroll","values","scrollTop","console","log","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","Container","Header","DragOver","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"sourceRoot":""}