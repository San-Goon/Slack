{"version":3,"file":"858.js","mappings":"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","sources":["webpack://dofront/./components/InviteChannelModal/index.tsx","webpack://dofront/./components/Modal/styles.tsx","webpack://dofront/./components/Modal/index.tsx","webpack://dofront/./hooks/useSocket.ts","webpack://dofront/./layouts/Workspace/styles.tsx","webpack://dofront/./components/Menu/styles.tsx","webpack://dofront/./components/Menu/index.tsx","webpack://dofront/./components/CreateChannelModal/index.tsx","webpack://dofront/./components/InviteWorkspaceModal/index.tsx","webpack://dofront/./components/DMList/style.tsx","webpack://dofront/./components/DMList/index.tsx","webpack://dofront/./components/ChannelList/index.tsx","webpack://dofront/./layouts/Workspace/index.tsx"],"sourcesContent":["import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport { useCallback, VFC } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteChannelModal: (flag: boolean) => void;\r\n}\r\nconst InviteChannelModal: VFC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { mutate: memberMutate } = useSWR<IUser[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then(() => {\r\n          memberMutate();\r\n          setShowInviteChannelModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newMember, workspace, channel],\r\n  );\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>채널 멤버 초대</span>\r\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteChannelModal;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CreateModal = styled.div`\r\n  position: fixed;\r\n  text-align: center;\r\n  left: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  z-index: 1022;\r\n\r\n  & > div {\r\n    margin-top: 200px;\r\n    display: inline-block;\r\n    width: 440px;\r\n    background: white;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    max-width: 440px;\r\n    padding: 30px 40px 0;\r\n    z-index: 1012;\r\n    position: relative;\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;\r\n","import React, { FC, useCallback } from 'react';\r\nimport { CloseModalButton, CreateModal } from './styles';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n}\r\n\r\nconst Modal: FC<Props> = ({ show, children, onCloseModal }) => {\r\n  const stopPropagation = useCallback((e) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <CreateModal onClick={onCloseModal}>\r\n      <div onClick={stopPropagation}>\r\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\r\n        {children}\r\n      </div>\r\n    </CreateModal>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import io from 'socket.io-client';\r\nimport { useCallback } from 'react';\r\n\r\nconst backUrl = 'http://localhost:3095';\r\n\r\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\r\n\r\nconst useSocket = (workspace?: string): [SocketIOClient.Socket | undefined, () => void] => {\r\n  const disconnect = useCallback(() => {\r\n    if (workspace) {\r\n      sockets[workspace].disconnect();\r\n      delete sockets[workspace];\r\n    }\r\n  }, []);\r\n\r\n  if (!workspace) {\r\n    return [undefined, disconnect];\r\n  }\r\n\r\n  if (!sockets[workspace]) {\r\n    sockets[workspace] = io.connect(`${backUrl}/ws-${workspace}`, { transports: ['websocket'] });\r\n  }\r\n\r\n  return [sockets[workspace], disconnect];\r\n};\r\n\r\nexport default useSocket;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const RightMenu = styled.div`\r\n  float: right;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 38px;\r\n  background: #350d36;\r\n  color: #ffffff;\r\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\r\n  padding: 5px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ProfileImg = styled.img`\r\n  width: 28px;\r\n  height: 28px;\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 16px;\r\n`;\r\n\r\nexport const ProfileModal = styled.div`\r\n  display: flex;\r\n  padding: 20px;\r\n  & img {\r\n    display: flex;\r\n  }\r\n  & > div {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-left: 10px;\r\n  }\r\n  & #profile-name {\r\n    font-weight: bold;\r\n    display: inline-flex;\r\n  }\r\n  & #profile-active {\r\n    font-size: 13px;\r\n    display: inline-flex;\r\n  }\r\n`;\r\n\r\nexport const LogOutButton = styled.button`\r\n  border: none;\r\n  width: 100%;\r\n  border-top: 1px solid rgb(29, 28, 29);\r\n  background: transparent;\r\n  display: block;\r\n  height: 33px;\r\n  padding: 5px 20px 5px;\r\n  outline: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceWrapper = styled.div`\r\n  display: flex;\r\n  flex: 1;\r\n`;\r\n\r\nexport const Workspaces = styled.div`\r\n  width: 65px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  background: #3f0e40;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-right: 1px solid rgb(82, 38, 83);\r\n  vertical-align: top;\r\n  text-align: center;\r\n  padding: 15px 0 0;\r\n`;\r\n\r\nexport const Channels = styled.nav`\r\n  width: 260px;\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  background: #3f0e40;\r\n  color: rgb(188, 171, 188);\r\n  vertical-align: top;\r\n  & a {\r\n    padding-left: 36px;\r\n    color: inherit;\r\n    text-decoration: none;\r\n    height: 28px;\r\n    line-height: 28px;\r\n    display: flex;\r\n    align-items: center;\r\n    &.selected {\r\n      color: white;\r\n    }\r\n  }\r\n  & .bold {\r\n    color: white;\r\n    font-weight: bold;\r\n  }\r\n  & .count {\r\n    margin-left: auto;\r\n    background: #cd2553;\r\n    border-radius: 16px;\r\n    display: inline-block;\r\n    font-size: 12px;\r\n    font-weight: 700;\r\n    height: 18px;\r\n    line-height: 18px;\r\n    padding: 0 9px;\r\n    color: white;\r\n    margin-right: 16px;\r\n  }\r\n  & h2 {\r\n    height: 36px;\r\n    line-height: 36px;\r\n    margin: 0;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    font-size: 15px;\r\n  }\r\n`;\r\n\r\nexport const WorkspaceName = styled.button`\r\n  height: 64px;\r\n  line-height: 64px;\r\n  border: none;\r\n  width: 100%;\r\n  text-align: left;\r\n  border-top: 1px solid rgb(82, 38, 83);\r\n  border-bottom: 1px solid rgb(82, 38, 83);\r\n  font-weight: 900;\r\n  font-size: 24px;\r\n  background: transparent;\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  padding: 0;\r\n  padding-left: 16px;\r\n  margin: 0;\r\n  color: white;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const MenuScroll = styled.div`\r\n  height: calc(100vh - 102px);\r\n  overflow-y: auto;\r\n`;\r\n\r\nexport const WorkspaceModal = styled.div`\r\n  padding: 10px 0 0;\r\n  & h2 {\r\n    padding-left: 20px;\r\n  }\r\n  & > button {\r\n    width: 100%;\r\n    height: 28px;\r\n    padding: 4px;\r\n    border: none;\r\n    background: transparent;\r\n    border-top: 1px solid rgb(28, 29, 28);\r\n    cursor: pointer;\r\n    &:last-of-type {\r\n      border-bottom: 1px solid rgb(28, 29, 28);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Chats = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nexport const AddButton = styled.button`\r\n  color: white;\r\n  font-size: 24px;\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  background: transparent;\r\n  border: none;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const WorkspaceButton = styled.button`\r\n  display: inline-block;\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  background: white;\r\n  border: 3px solid #3f0e40;\r\n  margin-bottom: 15px;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  color: black;\r\n  cursor: pointer;\r\n`;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CreateMenu = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  z-index: 1000;\r\n  & > div {\r\n    position: absolute;\r\n    display: inline-block;\r\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\r\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\r\n    border-radius: 6px;\r\n    user-select: none;\r\n    min-width: 360px;\r\n    z-index: 512;\r\n    max-height: calc(100vh - 20px);\r\n    color: rgb(29, 28, 29);\r\n  }\r\n`;\r\n\r\nexport const CloseModalButton = styled.button`\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 6px;\r\n  background: transparent;\r\n  border: none;\r\n  font-size: 30px;\r\n  cursor: pointer;\r\n`;\r\n","import React, { CSSProperties, FC, useCallback } from 'react';\r\nimport { CloseModalButton, CreateMenu } from './styles';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: (e: any) => void;\r\n  style: CSSProperties;\r\n  closeButton?: boolean;\r\n}\r\nconst Menu: FC<Props> = ({ children, style, show, onCloseModal, closeButton }) => {\r\n  const stopPropagation = useCallback((e) => {\r\n    e.stopPropagation();\r\n  }, []);\r\n\r\n  if (!show) return null;\r\n\r\n  return (\r\n    <CreateMenu onClick={onCloseModal}>\r\n      <div style={style} onClick={stopPropagation}>\r\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\r\n        {children}\r\n      </div>\r\n    </CreateMenu>\r\n  );\r\n};\r\nMenu.defaultProps = {\r\n  closeButton: true,\r\n};\r\n\r\nexport default Menu;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { useCallback, VFC } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowCreateChannelModal: (flag: boolean) => void;\r\n}\r\n\r\nconst CreateChannelModal: VFC<Props> = ({ show, onCloseModal, setShowCreateChannelModal }) => {\r\n  const [newChannel, onChangeNewChannel, setNewChannel] = useInput('');\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n\r\n  const {\r\n    data: userData,\r\n    error,\r\n    mutate: userMutate,\r\n  } = useSWR<IUser | false>('/api/users', fetcher, { dedupingInterval: 2000 });\r\n  const { data: ChannelData, mutate: channelMutate } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels` : null,\r\n    fetcher,\r\n  );\r\n  const onCreateChannel = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      axios\r\n        .post(\r\n          `/api/workspaces/${workspace}/channels`,\r\n          {\r\n            name: newChannel,\r\n          },\r\n          { withCredentials: true },\r\n        )\r\n        .then(() => {\r\n          setShowCreateChannelModal(false);\r\n          setNewChannel('');\r\n          channelMutate();\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newChannel],\r\n  );\r\n\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onCreateChannel}>\r\n        <Label id=\"channel-label\">\r\n          <span>채널</span>\r\n          <Input id=\"channel\" value={newChannel} onChange={onChangeNewChannel} />\r\n        </Label>\r\n        <Button type=\"submit\">생성하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CreateChannelModal;\r\n","import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport { useCallback, VFC } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteWorkspaceModal: (flag: boolean) => void;\r\n}\r\nconst InviteWorkspaceModal: VFC<Props> = ({ show, onCloseModal, setShowInviteWorkspaceModal }) => {\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\r\n  const { mutate: memberMutate } = useSWR<IChannel[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then(() => {\r\n          memberMutate();\r\n          setShowInviteWorkspaceModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [workspace, newMember],\r\n  );\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>이메일</span>\r\n          <Input id=\"member\" type=\"email\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteWorkspaceModal;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\r\n  background: transparent;\r\n  border: none;\r\n  width: 26px;\r\n  height: 26px;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: white;\r\n  margin-left: 10px;\r\n  cursor: pointer;\r\n  ${({ collapse }) =>\r\n    collapse &&\r\n    `\r\n    & i {\r\n      transform: none;\r\n    }\r\n  `};\r\n`;\r\n","import useSocket from '@hooks/useSocket';\r\nimport { IDM, IUser, IUserWithOnline } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\nimport useSWR from 'swr';\r\nimport { CollapseButton } from './style';\r\n\r\nconst DMList: FC = () => {\r\n  const { workspace } = useParams<{ workspace: string }>();\r\n  const { data: userData, error, mutate } = useSWR<IUser>('/api/users', fetcher, { dedupingInterval: 2000 });\r\n\r\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\r\n    userData ? `/api/workspaces/${workspace}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n  const [countList, setCountList] = useState<{ [key: string]: number }>({});\r\n  const [onlineList, setOnlineList] = useState<number[]>([]);\r\n  const [socket] = useSocket(workspace);\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  const resetCount = useCallback(\r\n    (id) => () => {\r\n      setCountList((list) => {\r\n        return {\r\n          ...list,\r\n          [id]: 0,\r\n        };\r\n      });\r\n    },\r\n    [],\r\n  );\r\n  const onMessage = (data: IDM) => {\r\n    console.log('dm수신', data);\r\n    setCountList((list) => {\r\n      return {\r\n        ...list,\r\n        [data.SenderId]: list[data.SenderId] ? list[data.SenderId] + 1 : 1,\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log('DMList: workspace 바뀌었다', workspace);\r\n    setOnlineList([]);\r\n    setCountList({});\r\n  }, [workspace]);\r\n\r\n  useEffect(() => {\r\n    socket?.on('onlineList', (data: number[]) => {\r\n      setOnlineList(data);\r\n    });\r\n    socket?.on('dm', onMessage);\r\n    console.log('socket on dm', socket?.hasListeners('dm'), socket);\r\n    return () => {\r\n      socket?.off('dm', onMessage);\r\n      console.log('socket off dm', socket?.hasListeners('dm'));\r\n      socket?.off('onlineList');\r\n    };\r\n  }, [socket]);\r\n\r\n  return (\r\n    <>\r\n      <h2>\r\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel-sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon-inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Direct Message</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          memberData?.map((member) => {\r\n            const isOnline = onlineList.includes(member.id);\r\n            const count = countList[member.id] || 0;\r\n            return (\r\n              <NavLink key={member.id} activeClassName=\"selected\" to={`/workspace/${workspace}/dm/${member.id}`}>\r\n                <i\r\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\r\n                    isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\r\n                  }`}\r\n                  aria-hidden=\"true\"\r\n                  data-qa=\"presence_indicator\"\r\n                  data-qa-presence-self=\"false\"\r\n                  data-qa-presence-active=\"false\"\r\n                  data-qa-presence-dnd=\"false\"\r\n                />\r\n                <span>{member.nickname}</span>\r\n                {member.id === userData?.id && <span> (나)</span>}\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DMList;\r\n","import { CollapseButton } from '@components/DMList/style';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { FC, useCallback, useState } from 'react';\r\nimport { useLocation, useParams } from 'react-router';\r\nimport useSWR from 'swr';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst ChannelList: FC = () => {\r\n  const { workspace } = useParams<{ workspace?: string }>();\r\n  const location = useLocation();\r\n  const { data: userData, error, mutate } = useSWR<IUser>('/api/users', fetcher, { dedupingInterval: 2000 });\r\n  const { data: ChannelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\r\n\r\n  const [channelCollapse, setChannelCollapse] = useState(false);\r\n  const [countList, setCountList] = useState<{ [key: string]: number | undefined }>({});\r\n\r\n  const toggleChannelCollapse = useCallback(() => {\r\n    setChannelCollapse((prev) => !prev);\r\n  }, []);\r\n\r\n  const resetCount = useCallback(\r\n    (id) => () => {\r\n      setCountList((list) => {\r\n        return {\r\n          ...list,\r\n          [id]: undefined,\r\n        };\r\n      });\r\n    },\r\n    [],\r\n  );\r\n  return (\r\n    <>\r\n      <h2>\r\n        <CollapseButton collapse={channelCollapse} onClick={toggleChannelCollapse}>\r\n          <i\r\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\r\n            data-qa=\"channel-section-collapse\"\r\n            aria-hidden=\"true\"\r\n          />\r\n        </CollapseButton>\r\n        <span>Channels</span>\r\n      </h2>\r\n      <div>\r\n        {!channelCollapse &&\r\n          ChannelData?.map((channel) => {\r\n            return (\r\n              <NavLink\r\n                key={channel.name}\r\n                activeClassName=\"selected\"\r\n                to={`/workspace/${workspace}/channel/${channel.name}`}\r\n              >\r\n                <span># {channel.name}</span>\r\n              </NavLink>\r\n            );\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChannelList;\r\n","import fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport React, { useCallback, useEffect, useState, VFC } from 'react';\r\nimport { Redirect, Route, Switch, useParams } from 'react-router';\r\nimport useSWR from 'swr';\r\nimport {\r\n  Channels,\r\n  Header,\r\n  ProfileImg,\r\n  RightMenu,\r\n  WorkspaceWrapper,\r\n  Workspaces,\r\n  Chats,\r\n  WorkspaceName,\r\n  MenuScroll,\r\n  ProfileModal,\r\n  LogOutButton,\r\n  WorkspaceButton,\r\n  AddButton,\r\n  WorkspaceModal,\r\n} from './styles';\r\nimport gravatar from 'gravatar';\r\nimport loadable from '@loadable/component';\r\nimport Menu from '@components/Menu';\r\nimport { Link } from 'react-router-dom';\r\nimport { IChannel, IUser } from '@typings/db';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport useInput from '@hooks/useInput';\r\nimport Modal from '@components/Modal';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport CreateChannelModal from '@components/CreateChannelModal';\r\nimport InviteWorkspacemodal from '@components/InviteWorkspaceModal';\r\nimport InviteChannelmodal from '@components/InviteChannelModal';\r\nimport DMList from '@components/DMList';\r\nimport ChannelList from '@components/ChannelList';\r\nimport useSocket from '@hooks/useSocket';\r\n\r\nconst Channel = loadable(() => import('@pages/Channel'));\r\nconst DirectMessage = loadable(() => import('@pages/DirectMessage'));\r\n\r\nconst Workspace: VFC = () => {\r\n  const [showUserMenu, setShowUserMenu] = useState(false);\r\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\r\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\r\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\r\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\r\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\r\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n\r\n  const { data: userData, error, mutate } = useSWR<IUser | false>('/api/users', fetcher, { dedupingInterval: 2000 });\r\n  const { data: ChannelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\r\n  const { data: memberData } = useSWR<IUser[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n  const [socket, disconnect] = useSocket(workspace);\r\n\r\n  useEffect(() => {\r\n    if (ChannelData && userData && socket) {\r\n      socket.emit('login', { id: userData.id, channels: ChannelData.map((v) => v.id) });\r\n    }\r\n  }, [socket, ChannelData, userData]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      disconnect();\r\n    };\r\n  }, [workspace, disconnect]);\r\n\r\n  const onLogout = useCallback(() => {\r\n    axios\r\n      .post('/api/users/logout', null, {\r\n        withCredentials: true,\r\n      })\r\n      .then(() => {\r\n        mutate(false, false);\r\n      });\r\n  }, [mutate]);\r\n\r\n  const onClickUserProfile = useCallback(() => {\r\n    setShowUserMenu((prev) => !prev);\r\n  }, []);\r\n\r\n  const onCloseUserProfile = useCallback((e) => {\r\n    e.stopPropagation();\r\n    setShowUserMenu(false);\r\n  }, []);\r\n\r\n  const onClickCreateWorkspace = useCallback(() => {\r\n    setShowCreateWorkspaceModal(true);\r\n  }, []);\r\n\r\n  const onCreateWorkspace = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newWorkspace || !newWorkspace.trim()) return;\r\n      if (!newUrl || !newUrl.trim()) return;\r\n      axios\r\n        .post(\r\n          '/api/workspaces',\r\n          {\r\n            workspace: newWorkspace,\r\n            url: newUrl,\r\n          },\r\n          {\r\n            withCredentials: true,\r\n          },\r\n        )\r\n        .then(() => {\r\n          mutate();\r\n          setShowCreateWorkspaceModal(false);\r\n          setNewWorkspace('');\r\n          setNewUrl('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newWorkspace, newUrl],\r\n  );\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowCreateWorkspaceModal(false);\r\n    setShowCreateChannelModal(false);\r\n    setShowInviteChannelModal(false);\r\n    setShowInviteWorkspaceModal(false);\r\n  }, []);\r\n\r\n  const toggleWorkspaceModal = useCallback(() => {\r\n    setShowWorkspaceModal((prev) => !prev);\r\n  }, []);\r\n  if (!userData) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n  const onClickAddChannel = useCallback(() => {\r\n    setShowCreateChannelModal(true);\r\n  }, []);\r\n\r\n  const onClickInviteWorkspace = useCallback(() => {\r\n    setShowInviteWorkspaceModal(true);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Header>\r\n        <RightMenu>\r\n          <span onClick={onClickUserProfile}>\r\n            <ProfileImg\r\n              src={gravatar.url(userData.email, { s: '28px', d: 'retro' })}\r\n              alt={userData.nickname}\r\n            ></ProfileImg>\r\n            {showUserMenu && (\r\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onCloseUserProfile}>\r\n                <ProfileModal>\r\n                  <img src={gravatar.url(userData.email, { s: '36px', d: 'retro' })} alt={userData.nickname} />\r\n                  <div>\r\n                    <span id=\"profile-name\">{userData.nickname}</span>\r\n                    <span id=\"profile-active\">Active</span>\r\n                  </div>\r\n                </ProfileModal>\r\n                <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\r\n              </Menu>\r\n            )}\r\n          </span>\r\n        </RightMenu>\r\n      </Header>\r\n      <WorkspaceWrapper>\r\n        <Workspaces>\r\n          {userData?.Workspaces.map((ws) => {\r\n            return (\r\n              <Link key={ws.id} to={`/workspace/${ws.url}/channel/일반`}>\r\n                <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\r\n              </Link>\r\n            );\r\n          })}\r\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\r\n        </Workspaces>\r\n        <Channels>\r\n          <WorkspaceName onClick={toggleWorkspaceModal}>Sleact</WorkspaceName>\r\n          <MenuScroll>\r\n            <Menu show={showWorkspaceModal} onCloseModal={toggleWorkspaceModal} style={{ top: 95, left: 80 }}>\r\n              <WorkspaceModal>\r\n                <h2>Sleact</h2>\r\n                <button onClick={onClickInviteWorkspace}>워크스페이스에 사용자 초대</button>\r\n                <button onClick={onClickAddChannel}>채널 만들기</button>\r\n                <button onClick={onLogout}>로그아웃</button>\r\n              </WorkspaceModal>\r\n            </Menu>\r\n            <ChannelList />\r\n            <DMList />\r\n          </MenuScroll>\r\n        </Channels>\r\n        <Chats>\r\n          <Switch>\r\n            <Route path=\"/workspace/:workspace/channel/:channel\" component={Channel} />\r\n            <Route path=\"/workspace/:workspace/dm/:id\" component={DirectMessage} />\r\n          </Switch>\r\n        </Chats>\r\n      </WorkspaceWrapper>\r\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\r\n        <form onSubmit={onCreateWorkspace}>\r\n          <Label id=\"workspace-label\">\r\n            <span>워크스페이스 이름</span>\r\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\r\n          </Label>\r\n          <Label id=\"workspace-url-label\">\r\n            <span>워크스페이스 url</span>\r\n            <Input id=\"workspace\" value={newUrl} onChange={onChangeNewUrl} />\r\n          </Label>\r\n          <Button type=\"submit\">생성하기</Button>\r\n        </form>\r\n      </Modal>\r\n      <CreateChannelModal\r\n        show={showCreateChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowCreateChannelModal={setShowCreateChannelModal}\r\n      />\r\n      <InviteWorkspacemodal\r\n        show={showInviteWorkspaceModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteWorkspaceModal={setShowInviteWorkspaceModal}\r\n      />\r\n      <InviteChannelmodal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n      <ToastContainer position=\"bottom-center\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Workspace;\r\n"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","mutate","memberMutate","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","onSubmit","id","value","onChange","type","CreateModal","CloseModalButton","children","stopPropagation","onClick","sockets","disconnect","io","transports","undefined","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","CreateMenu","Menu","style","closeButton","defaultProps","setShowCreateChannelModal","newChannel","onChangeNewChannel","setNewChannel","userMutate","dedupingInterval","ChannelData","channelMutate","onCreateChannel","name","withCredentials","Modal","setShowInviteWorkspaceModal","CollapseButton","collapse","memberData","channelCollapse","setChannelCollapse","useState","countList","setCountList","onlineList","setOnlineList","socket","useSocket","toggleChannelCollapse","prev","onMessage","list","log","SenderId","useEffect","on","hasListeners","off","className","map","member","isOnline","includes","key","activeClassName","to","nickname","useLocation","Channel","loadable","DirectMessage","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","newWorkspace","onChangeNewWorkspace","setNewWorkspace","newUrl","onChangeNewUrl","setNewUrl","showWorkspaceModal","setShowWorkspaceModal","showCreateChannelModal","showInviteWorkspaceModal","showInviteChannelModal","emit","channels","v","onLogout","onClickUserProfile","onCloseUserProfile","onClickCreateWorkspace","onCreateWorkspace","url","toggleWorkspaceModal","onClickAddChannel","onClickInviteWorkspace","src","gravatar","s","d","alt","right","top","ws","slice","toUpperCase","left","path","component"],"sourceRoot":""}