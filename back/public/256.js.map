{"version":3,"file":"256.js","mappings":"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","sources":["webpack://dofront/./pages/Channel/styles.tsx","webpack://dofront/./pages/Channel/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  height: calc(100vh - 38px);\r\n  flex-flow: column;\r\n  position: relative;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n  height: 64px;\r\n  display: flex;\r\n  width: 100%;\r\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\r\n  box-shadow: 0 1px 0 var(--saf-0);\r\n  padding: 20px 16px 20px 20px;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  \r\n  & .header-right {\r\n    display: flex;\r\n    flex: 1;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n`;\r\n\r\nexport const DragOver = styled.div`\r\n  position: absolute;\r\n  top: 64px;\r\n  left: 0;\r\n  width: 100%;\r\n  height: calc(100% - 64px);\r\n  background: white;\r\n  opacity: 0.7;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 40px;\r\n`;\r\n","import ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport useSWR from 'swr';\r\nimport { Container, Header } from './styles';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport { IChannel, IChat, IUser } from '@typings/db';\r\nimport useSocket from '@hooks/useSocket';\r\nimport axios from 'axios';\r\nimport makeSection from '@utils/makeSection';\r\nimport InviteChannelModal from '@components/InviteChannelModal';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\n\r\nconst Channel = () => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const { data: myData } = useSWR('/api/users', fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IChat[]>(\r\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\r\n  const { data: channelMembersData } = useSWR<IUser[]>(\r\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const [socket] = useSocket(workspace);\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(chat);\r\n      if (chat?.trim() && chatData && channelData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            UserId: myData.id,\r\n            User: myData,\r\n            ChannelId: channelData.id,\r\n            Channel: channelData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          setChat('');\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            mutateChat();\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, myData, channelData, workspace, channel],\r\n  );\r\n\r\n  const onMessage = useCallback(\r\n    (data: IChat) => {\r\n      if (data.Channel.name === channel && data.UserId !== myData?.id) {\r\n        mutateChat((chatData) => {\r\n          chatData?.[0].unshift(data);\r\n          return chatData;\r\n        }, false).then(() => {\r\n          if (scrollbarRef.current) {\r\n            if (\r\n              scrollbarRef.current.getScrollHeight() <\r\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n            ) {\r\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n              setTimeout(() => {\r\n                scrollbarRef.current?.scrollToBottom();\r\n              }, 50);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [channel, myData],\r\n  );\r\n\r\n  useEffect(() => {\r\n    socket?.on('message', onMessage);\r\n    return () => {\r\n      socket?.off('message', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      scrollbarRef.current?.scrollToBottom();\r\n    }\r\n  }, [chatData]);\r\n\r\n  const onClickInviteChannel = useCallback(() => {\r\n    setShowInviteChannelModal(true);\r\n  }, []);\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowInviteChannelModal(false);\r\n  }, []);\r\n\r\n  if (!myData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n  return (\r\n    <Container>\r\n      <Header>\r\n        <span>#{channel}</span>\r\n        <div className=\"header-right\">\r\n          <span>{channelMembersData?.length}</span>\r\n          <button\r\n            onClick={onClickInviteChannel}\r\n            className=\"c-button-unstyled p-ia__view_header__button\"\r\n            aria-label=\"Add people to #react-native\"\r\n            data-sk=\"tooltip-parent\"\r\n            type=\"button\"\r\n          >\r\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\r\n          </button>\r\n        </div>\r\n      </Header>\r\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\r\n      <InviteChannelModal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n"],"names":["Container","Header","workspace","channel","useParams","data","myData","useSWR","fetcher","chat","onChangeChat","setChat","useInput","chatData","mutate","mutateChat","setSize","useSWRInfinite","index","channelData","channelMembersData","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","showInviteChannelModal","setShowInviteChannelModal","useState","onSubmitForm","useCallback","e","preventDefault","console","log","trim","savedChat","prevChatData","unshift","id","content","UserId","User","ChannelId","Channel","createdAt","Date","then","current","scrollToBottom","axios","catch","error","onMessage","name","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","onCloseModal","chatSections","makeSection","flat","reverse","className","onClick","type","ChatList","ref","ChatBox","InviteChannelModal","show"],"sourceRoot":""}