{"version":3,"file":"591.js","mappings":"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","sources":["webpack://front/./components/InviteChannelModal/index.tsx","webpack://front/./pages/Channel/index.tsx"],"sourcesContent":["import Modal from '@components/Modal';\r\nimport useInput from '@hooks/useInput';\r\nimport { Button, Input, Label } from '@pages/SignUp/styles';\r\nimport { IUser } from '@typings/db';\r\nimport fetcher from '@utils/fetcher';\r\nimport axios from 'axios';\r\nimport { useCallback, VFC } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { toast } from 'react-toastify';\r\nimport useSWR from 'swr';\r\nimport React from 'react';\r\nimport { backUrl } from '@utils/config';\r\n\r\ninterface Props {\r\n  show: boolean;\r\n  onCloseModal: () => void;\r\n  setShowInviteChannelModal: (flag: boolean) => void;\r\n}\r\nconst InviteChannelModal: VFC<Props> = ({ show, onCloseModal, setShowInviteChannelModal }) => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const [newMember, onChangeNewMember, setNewMember] = useInput('');\r\n  const { data: userData } = useSWR<IUser>(`/api/users`, fetcher);\r\n  const { mutate: memberMutate } = useSWR<IUser[]>(\r\n    userData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n  const onInviteMember = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      if (!newMember || !newMember.trim()) {\r\n        return;\r\n      }\r\n      axios\r\n        .post(`/api/workspaces/${workspace}/channels/${channel}/members`, {\r\n          email: newMember,\r\n        })\r\n        .then(() => {\r\n          memberMutate();\r\n          setShowInviteChannelModal(false);\r\n          setNewMember('');\r\n        })\r\n        .catch((error) => {\r\n          console.dir(error);\r\n          toast.error(error.response?.data, { position: 'bottom-center' });\r\n        });\r\n    },\r\n    [newMember, workspace, channel],\r\n  );\r\n  return (\r\n    <Modal show={show} onCloseModal={onCloseModal}>\r\n      <form onSubmit={onInviteMember}>\r\n        <Label id=\"member-label\">\r\n          <span>채널 멤버 초대</span>\r\n          <Input id=\"member\" value={newMember} onChange={onChangeNewMember} />\r\n        </Label>\r\n        <Button type=\"submit\">초대하기</Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default InviteChannelModal;\r\n","import ChatBox from '@components/ChatBox';\r\nimport ChatList from '@components/ChatList';\r\nimport useInput from '@hooks/useInput';\r\nimport fetcher from '@utils/fetcher';\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport useSWR from 'swr';\r\nimport { Container, DragOver, Header } from './styles';\r\nimport useSWRInfinite from 'swr/infinite';\r\nimport { IChannel, IChat, IUser } from '@typings/db';\r\nimport useSocket from '@hooks/useSocket';\r\nimport axios from 'axios';\r\nimport makeSection from '@utils/makeSection';\r\nimport InviteChannelModal from '@components/InviteChannelModal';\r\nimport Scrollbars from 'react-custom-scrollbars';\r\nimport { backUrl } from '@utils/config';\r\n\r\nconst Channel = () => {\r\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\r\n  const { data: myData } = useSWR(`/api/users`, fetcher);\r\n  const [chat, onChangeChat, setChat] = useInput('');\r\n  const {\r\n    data: chatData,\r\n    mutate: mutateChat,\r\n    setSize,\r\n  } = useSWRInfinite<IChat[]>(\r\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\r\n    fetcher,\r\n  );\r\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\r\n  const { data: channelMembersData } = useSWR<IUser[]>(\r\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\r\n    fetcher,\r\n  );\r\n\r\n  const [socket] = useSocket(workspace);\r\n  const isEmpty = chatData?.[0]?.length === 0;\r\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\r\n  const scrollbarRef = useRef<Scrollbars>(null);\r\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\r\n  const [dragOver, setDragOver] = useState(false);\r\n  const onSubmitForm = useCallback(\r\n    (e) => {\r\n      e.preventDefault();\r\n      console.log(chat);\r\n      if (chat?.trim() && chatData && channelData) {\r\n        const savedChat = chat;\r\n        mutateChat((prevChatData) => {\r\n          prevChatData?.[0].unshift({\r\n            id: (chatData[0][0]?.id || 0) + 1,\r\n            content: savedChat,\r\n            UserId: myData.id,\r\n            User: myData,\r\n            ChannelId: channelData.id,\r\n            Channel: channelData,\r\n            createdAt: new Date(),\r\n          });\r\n          return prevChatData;\r\n        }, false).then(() => {\r\n          localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\r\n          setChat('');\r\n          scrollbarRef.current?.scrollToBottom();\r\n        });\r\n        axios\r\n          .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\r\n            content: chat,\r\n          })\r\n          .then(() => {\r\n            mutateChat();\r\n          })\r\n          .catch(console.error);\r\n      }\r\n    },\r\n    [chat, chatData, myData, channelData, workspace, channel],\r\n  );\r\n\r\n  const onMessage = useCallback(\r\n    (data: IChat) => {\r\n      if (data.Channel.name === channel && (data.content.startsWith('uploads\\\\') || data.UserId !== myData?.id)) {\r\n        mutateChat((chatData) => {\r\n          chatData?.[0].unshift(data);\r\n          return chatData;\r\n        }, false).then(() => {\r\n          if (scrollbarRef.current) {\r\n            if (\r\n              scrollbarRef.current.getScrollHeight() <\r\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\r\n            ) {\r\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\r\n              setTimeout(() => {\r\n                scrollbarRef.current?.scrollToBottom();\r\n              }, 50);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [channel, myData],\r\n  );\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(`${workspace}-${channel}`, new Date().getTime().toString());\r\n  }, [workspace, channel]);\r\n\r\n  useEffect(() => {\r\n    socket?.on('message', onMessage);\r\n    return () => {\r\n      socket?.off('message', onMessage);\r\n    };\r\n  }, [socket, onMessage]);\r\n\r\n  useEffect(() => {\r\n    if (chatData?.length === 1) {\r\n      scrollbarRef.current?.scrollToBottom();\r\n    }\r\n  }, [chatData]);\r\n\r\n  const onClickInviteChannel = useCallback(() => {\r\n    setShowInviteChannelModal(true);\r\n  }, []);\r\n\r\n  const onCloseModal = useCallback(() => {\r\n    setShowInviteChannelModal(false);\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (e) => {\r\n      console.log(e);\r\n      const formData = new FormData();\r\n      if (e.dataTransfer.items) {\r\n        for (let i = 0; i < e.dataTransfer.items.length; i++) {\r\n          if (e.dataTransfer.items[i].kind === 'file') {\r\n            const file = e.dataTransfer.items[i].getAsFile();\r\n            console.log('... file[' + i + '].name =' + file.name);\r\n            formData.append('image', file);\r\n          }\r\n        }\r\n      } else {\r\n        for (let i = 0; i < e.dataTransfer.files.length; i++) {\r\n          console.log('...file[' + i + '].name=' + e.dataTransfer.files[i].name);\r\n          formData.append('image', e.dataTransfer.files[i]);\r\n        }\r\n      }\r\n      axios.post(`/api/workspaces/${workspace}/channels/${channel}/images`, formData).then(() => {\r\n        setDragOver(false);\r\n      });\r\n    },\r\n    [workspace, channel],\r\n  );\r\n\r\n  const onDragOver = useCallback((e) => {\r\n    e.preventDefault();\r\n    console.log(e);\r\n    setDragOver(true);\r\n  }, []);\r\n\r\n  if (!myData) {\r\n    return null;\r\n  }\r\n\r\n  const chatSections = makeSection(chatData ? chatData.flat().reverse() : []);\r\n  return (\r\n    <Container onDrop={onDrop} onDragOver={onDragOver}>\r\n      <Header>\r\n        <span>#{channel}</span>\r\n        <div className=\"header-right\">\r\n          <span>{channelMembersData?.length}</span>\r\n          <button\r\n            onClick={onClickInviteChannel}\r\n            className=\"c-button-unstyled p-ia__view_header__button\"\r\n            aria-label=\"Add people to #react-native\"\r\n            data-sk=\"tooltip-parent\"\r\n            type=\"button\"\r\n          >\r\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\r\n          </button>\r\n        </div>\r\n      </Header>\r\n      <ChatList chatSections={chatSections} ref={scrollbarRef} setSize={setSize} isReachingEnd={isReachingEnd} />\r\n      <ChatBox chat={chat} onChangeChat={onChangeChat} onSubmitForm={onSubmitForm} />\r\n      <InviteChannelModal\r\n        show={showInviteChannelModal}\r\n        onCloseModal={onCloseModal}\r\n        setShowInviteChannelModal={setShowInviteChannelModal}\r\n      />\r\n      {dragOver && <DragOver>업로드!</DragOver>}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Channel;\r\n"],"names":["show","onCloseModal","setShowInviteChannelModal","workspace","channel","useParams","newMember","onChangeNewMember","setNewMember","useInput","data","userData","useSWR","fetcher","mutate","memberMutate","onInviteMember","useCallback","e","preventDefault","trim","axios","email","then","catch","error","console","dir","toast","response","position","Modal","onSubmit","id","value","onChange","type","myData","chat","onChangeChat","setChat","chatData","mutateChat","setSize","useSWRInfinite","index","channelData","channelMembersData","socket","useSocket","isReachingEnd","length","scrollbarRef","useRef","showInviteChannelModal","useState","dragOver","setDragOver","onSubmitForm","log","savedChat","prevChatData","unshift","content","UserId","User","ChannelId","Channel","createdAt","Date","localStorage","setItem","getTime","toString","current","scrollToBottom","onMessage","name","startsWith","getScrollHeight","getClientHeight","getScrollTop","getValues","setTimeout","useEffect","on","off","onClickInviteChannel","onDrop","formData","FormData","dataTransfer","items","i","kind","file","getAsFile","append","files","onDragOver","chatSections","makeSection","flat","reverse","className","onClick","ChatList","ref","ChatBox"],"sourceRoot":""}